# Firmware configuration file for the Raspberry Pi
#
# This file provides a minimum configuration if you're just interested
# in creating a raw image file that you can copy to an SDCard using dd(1).
# It doesn't support upgrading an image.

# Default ROOTFS if not specified
define(ROOTFS, "${PROJECT_ROOT}/buildroot/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR                    |
# +------------------------+
# | Boot partition (FAT32) |
# | zImage, bootcode.bin,  |
# | config.txt, etc.       |
# +------------------------+
# | Rootfs (EXT4)          |
# +------------------------+
# | Unused                 |
# +------------------------+
# | Unused                 |
# +------------------------+

# The Raspberry Pi is incredibly picky on the partition sizes
# and in ways that I don't understand. Test changes one at a
# time to make sure that they boot.
define(BOOT_PART_OFFSET, 63)
define(BOOT_PART_COUNT, 77261)

# Let the rootfs have room to grow up to 128 MiB and align
# it to the nearest 1 MB boundary
define(ROOTFS_PART_OFFSET, 77324)
define(ROOTFS_PART_COUNT, 289044)

# Firmware metadata
meta-product = "Tilde-Pi"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "rpi"
meta-architecture = "arm"
meta-author = "Frank Hunleth"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource bootcode.bin {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/bootcode.bin"
}
file-resource fixup.dat {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/fixup.dat"
}
file-resource start.elf {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/start.elf"
}
file-resource config.txt {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/config.txt"
}
file-resource zImage {
    # Use the DT kernel, but if you don't want it, remove
    # the .mkknlimg part of the next line.
    host-path = "${PROJECT_ROOT}/buildroot/output/images/zImage.mkknlimg"
}
file-resource bcm2708-rpi-b.dtb {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/bcm2708-rpi-b.dtb"
}
file-resource bcm2708-rpi-b-plus.dtb {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/bcm2708-rpi-b-plus.dtb"
}
file-resource bcm2709-rpi-2-b.dtb {
    host-path = "${PROJECT_ROOT}/buildroot/output/images/rpi-firmware/bcm2709-rpi-2-b.dtb"
}

file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
    }

    on-resource config.txt { fat_write(${BOOT_PART_OFFSET}, "config.txt") }
    on-resource bootcode.bin { fat_write(${BOOT_PART_OFFSET}, "bootcode.bin") }
    on-resource start.elf { fat_write(${BOOT_PART_OFFSET}, "start.elf") }
    on-resource fixup.dat { fat_write(${BOOT_PART_OFFSET}, "fixup.dat") }
    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage") }
    on-resource bcm2708-rpi-b.dtb { fat_write(${BOOT_PART_OFFSET}, "bcm2708-rpi-b.dtb") }
    on-resource bcm2708-rpi-b-plus.dtb { fat_write(${BOOT_PART_OFFSET}, "bcm2708-rpi-b-plus.dtb") }
    on-resource bcm2709-rpi-2-b.dtb { fat_write(${BOOT_PART_OFFSET}, "bcm2709-rpi-2-b.dtb") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_PART_OFFSET})
    }

    on-finish {
    }
}
